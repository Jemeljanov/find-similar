window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "find_similar", "modulename": "find_similar", "kind": "module", "doc": "<h1 id=\"findsimilar\">FindSimilar</h1>\n\n<p><a href=\"https://findsimilar.org\">findsimilar.org</a></p>\n\n<blockquote>\n  <p>User-friendly library to find similar objects</p>\n</blockquote>\n\n<ul>\n<li><a href=\"https://github.com/findsimilar/find-similar#mission-statement\">Mission Statement</a></li>\n<li><a href=\"https://github.com/findsimilar/find-similar#open-source-collaboration\">Open Source Collaboration</a></li>\n<li><a href=\"https://github.com/findsimilar/find-similar#installation\">Installation</a></li>\n<li><a href=\"https://github.com/findsimilar/find-similar#usage-example\">Usage</a></li>\n<li><a href=\"https://github.com/findsimilar/find-similar#development\">Development</a></li>\n</ul>\n\n<h2 id=\"mission-statement\">Mission Statement</h2>\n\n<p>The mission of the \"Find Similar\" project is to provide a powerful and versatile open source library that empowers developers to efficiently find similar objects and perform comparisons across a variety of data types. Whether dealing with texts, images, audio, or more, our project aims to simplify the process of identifying similarities and enhancing decision-making.</p>\n\n<h3 id=\"key-objectives\">Key Objectives</h3>\n\n<ol>\n<li><strong>Extensibility:</strong> We strive to build a flexible framework that goes beyond textual comparisons, with plans to expand compatibility to various data formats, including images, audio, and more.</li>\n<li><strong>Ease of Integration:</strong> Our library will offer an intuitive interface that integrates seamlessly into existing applications and workflows, making it accessible to developers regardless of their experience level.</li>\n<li><strong>Scalability:</strong> Our focus is on creating efficient algorithms and data structures that can handle datasets of varying sizes, ensuring performance and accuracy as the project scales.</li>\n<li><strong>Community Collaboration:</strong> By embracing the principles of open source development, we invite a diverse community of contributors to collaborate, improve, and innovate upon the project, fostering a culture of shared knowledge and expertise.</li>\n<li><strong>Documentation and Education:</strong> We are committed to providing comprehensive documentation, tutorials, and resources to help users and contributors understand the library's capabilities and use them effectively.</li>\n<li><strong>Privacy and Ethics:</strong> As we expand into various data types, we are dedicated to upholding privacy and ethical considerations, ensuring that our library is built and used responsibly.</li>\n</ol>\n\n<h3 id=\"join-us\">Join Us</h3>\n\n<p>We invite developers, data scientists, and enthusiasts from all backgrounds to join our mission. Together, we can shape the future of \"Find Similar,\" creating a powerful tool that enhances decision-making, discovery, and innovation across diverse fields.</p>\n\n<h2 id=\"open-source-collaboration\">Open Source Collaboration</h2>\n\n<p>\"Find Similar\" is an open source project, fostering collaboration and innovation. We welcome contributors from all backgrounds to join us in shaping the future of similarity comparisons across various data types.</p>\n\n<h2 id=\"installation\">Installation:</h2>\n\n<h3 id=\"from-pypi\">From PyPi</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>pip<span class=\"w\"> </span>install<span class=\"w\"> </span>find-similar\n</code></pre>\n</div>\n\n<p>You install core package from pypi. If you want to use tests and laboratory you can install find-similar from python package</p>\n\n<h3 id=\"from-python-package\">From python package</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>git<span class=\"w\"> </span>clone<span class=\"w\"> </span>https://github.com/findsimilar/find-similar\npip3<span class=\"w\"> </span>install<span class=\"w\"> </span>wheel\npython<span class=\"w\"> </span>find-similar/setup.py<span class=\"w\"> </span>bdist_wheel\npip3<span class=\"w\"> </span>install<span class=\"w\"> </span>find-similar/dist/*\n</code></pre>\n</div>\n\n<h2 id=\"usage-example\">Usage example:</h2>\n\n<h3 id=\"simple-usage\">Simple usage</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">find_similar</span> <span class=\"kn\">import</span> <span class=\"n\">find_similar</span>\n\n<span class=\"n\">texts</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;one two&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;two three&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;three four&#39;</span><span class=\"p\">]</span>\n\n<span class=\"n\">text_to_compare</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;one four&#39;</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">find_similar</span><span class=\"p\">(</span><span class=\"n\">text_to_compare</span><span class=\"p\">,</span> <span class=\"n\">texts</span><span class=\"p\">,</span> <span class=\"n\">count</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">result</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>expected result:</p>\n\n<pre><code>one two\n0.5\nthree four\n0.5\ntwo three\n0.0\n</code></pre>\n\n<h2 id=\"development\">Development</h2>\n\n<ul>\n<li>find_similar - this is the main package to install and use</li>\n<li>analytics - help functions to improve the main algorithm</li>\n<li>lab - python scripts to research</li>\n</ul>\n\n<h3 id=\"lab\">Lab</h3>\n\n<p>You can run any useful script from lab package</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nb\">cd</span><span class=\"w\"> </span>lab\n</code></pre>\n</div>\n\n<ul>\n<li>Use load_data_from_file.py to load test data</li>\n</ul>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>python<span class=\"w\"> </span>load_data_from_file.py<span class=\"w\"> </span>/my/path/to/file.xlsx\n</code></pre>\n</div>\n\n<ul>\n<li>Use check_total_rating.py to analyze algorithm accuracy</li>\n</ul>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>python<span class=\"w\"> </span>check_total_rating.py\n</code></pre>\n</div>\n\n<p>Example result:</p>\n\n<pre><code>\u041f\u043e\u0438\u0441\u043a \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d \u0434\u043b\u044f 529 \u043f\u043e\u0437\u0438\u0446\u0438\u0439:\n\u0442\u043e\u043f 1 -- 353 (66.73 %)\n\u0442\u043e\u043f 5 -- 442 (83.55 %)\n\u0442\u043e\u043f 10 -- 468 (88.47 %)\n\u0442\u043e\u043f 25 -- 501 (94.71 %)\n\u0442\u043e\u043f 50 -- 515 (97.35 %)\n\u0442\u043e\u043f 100 -- 519 (98.11 %)\n\u0442\u043e\u043f 500 -- 523 (98.87 %)\n\u0442\u043e\u043f 1000 -- 529 (100.0 %)\n\u0442\u043e\u043f 2000 -- 529 (100.0 %)\n</code></pre>\n\n<ul>\n<li>Use check_time_one_item to check how long time algorithm works for one item</li>\n</ul>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>python<span class=\"w\"> </span>check_time_one_item.py\n</code></pre>\n</div>\n\n<p>Example result:</p>\n\n<pre><code>Load base items...\n1999 items loaded\nRESULT TIME FOR ONE ITEM (REPEAT 1 times) = 0.03772415800085582\n</code></pre>\n\n<ul>\n<li>Use compare_two to compare two different texts. You can change texts in compare_two.txt file</li>\n</ul>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>python<span class=\"w\"> </span>compare_two.py\n</code></pre>\n</div>\n\n<ul>\n<li>Use tokenize_one to check how one text will be tokenized. You can set the text in tokenize_one.txt file</li>\n</ul>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>python<span class=\"w\"> </span>tokenize_one.py\n</code></pre>\n</div>\n"}, {"fullname": "find_similar.calc_functions", "modulename": "find_similar.calc_functions", "kind": "module", "doc": "<p>Calculation functions to find similarity percent</p>\n"}, {"fullname": "find_similar.calc_functions.calc_cosine_similarity_opt", "modulename": "find_similar.calc_functions", "qualname": "calc_cosine_similarity_opt", "kind": "function", "doc": "<p>Get cos between two sets of words</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x_set</strong>:  One set</li>\n<li><strong>y_set</strong>:  Another set</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>cos similarity</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x_set</span><span class=\"p\">:</span> <span class=\"nb\">set</span>, </span><span class=\"param\"><span class=\"n\">y_set</span><span class=\"p\">:</span> <span class=\"nb\">set</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "find_similar.calc_functions.TokenText", "modulename": "find_similar.calc_functions", "qualname": "TokenText", "kind": "class", "doc": "<p>The main type to work with text tokens</p>\n"}, {"fullname": "find_similar.calc_functions.TokenText.__init__", "modulename": "find_similar.calc_functions", "qualname": "TokenText.__init__", "kind": "function", "doc": "<p>init method</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>text</strong>:  simple text</li>\n<li><strong>tokens</strong>:  You can set already created tokens. Default = None</li>\n<li><strong>dictionary</strong>:  default = None. If you want to replace one words to others you can send the dictionary.</li>\n<li><strong>**kwargs</strong>:  You can set any properties in the result object</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>cos similarity</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text</span>, </span><span class=\"param\"><span class=\"n\">tokens</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">dictionary</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "find_similar.calc_functions.TokenText.text", "modulename": "find_similar.calc_functions", "qualname": "TokenText.text", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "find_similar.calc_functions.TokenText.tokens", "modulename": "find_similar.calc_functions", "qualname": "TokenText.tokens", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "find_similar.calc_functions.get_tokens", "modulename": "find_similar.calc_functions", "qualname": "get_tokens", "kind": "function", "doc": "<p>Get tokens from str text</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>text</strong>:  str text</li>\n<li><strong>dictionary</strong>:  default = None. If you want to replace one words to others you can send the dictionary.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>tokes for text</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text</span>, </span><span class=\"param\"><span class=\"n\">dictionary</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">set</span>:</span></span>", "funcdef": "def"}, {"fullname": "find_similar.calc_models", "modulename": "find_similar.calc_models", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "find_similar.calc_models.Item", "modulename": "find_similar.calc_models", "qualname": "Item", "kind": "class", "doc": "<p></p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "find_similar.calc_models.Item.id", "modulename": "find_similar.calc_models", "qualname": "Item.id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "find_similar.calc_models.Item.label", "modulename": "find_similar.calc_models", "qualname": "Item.label", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "find_similar.calc_models.Item.part_number", "modulename": "find_similar.calc_models", "qualname": "Item.part_number", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "find_similar.calc_models.Item.id_shop", "modulename": "find_similar.calc_models", "qualname": "Item.id_shop", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "find_similar.calc_models.Item.id_base_item", "modulename": "find_similar.calc_models", "qualname": "Item.id_base_item", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "find_similar.calc_models.Item.cos", "modulename": "find_similar.calc_models", "qualname": "Item.cos", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]"}, {"fullname": "find_similar.calc_models.Item.token_set", "modulename": "find_similar.calc_models", "qualname": "Item.token_set", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[set]"}, {"fullname": "find_similar.core", "modulename": "find_similar.core", "kind": "module", "doc": "<p>Core module with search functions</p>\n"}, {"fullname": "find_similar.core.find_similar", "modulename": "find_similar.core", "qualname": "find_similar", "kind": "function", "doc": "<p>The main function to search similar texts.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>text_to_check</strong>:  Text to find similars</li>\n<li><strong>texts</strong>:  List of str or TokenText. In these texts we will search similars</li>\n<li><strong>language</strong>:  Language, default='russian'</li>\n<li><strong>count</strong>:  Count results</li>\n<li><strong>dictionary</strong>:  default = None. If you want to replace one words to others you can send the dictionary.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Result list sorted by similarity percent</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">text_to_check</span>,</span><span class=\"param\">\t<span class=\"n\">texts</span>,</span><span class=\"param\">\t<span class=\"n\">language</span><span class=\"o\">=</span><span class=\"s1\">&#39;russian&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">count</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">dictionary</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">find_similar</span><span class=\"o\">.</span><span class=\"n\">calc_functions</span><span class=\"o\">.</span><span class=\"n\">TokenText</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "find_similar.tokenize", "modulename": "find_similar.tokenize", "kind": "module", "doc": "<p>Module with tokenize functions</p>\n"}, {"fullname": "find_similar.tokenize.morph", "modulename": "find_similar.tokenize", "qualname": "morph", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;pymorphy2.analyzer.MorphAnalyzer object&gt;"}, {"fullname": "find_similar.tokenize.PUNCTUATION_SET", "modulename": "find_similar.tokenize", "qualname": "PUNCTUATION_SET", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;)&#x27;, &#x27;-&#x27;, &#x27;.&#x27;, &#x27;,&#x27;, &#x27;*&#x27;, &#x27;:&#x27;, &#x27;;&#x27;, &#x27;(&#x27;}"}, {"fullname": "find_similar.tokenize.UNUSEFUL_WORDS", "modulename": "find_similar.tokenize", "qualname": "UNUSEFUL_WORDS", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;\u043c\u043c&#x27;, &#x27;\u0445&#x27;, &#x27;cc&#x27;, &#x27;x&#x27;, &#x27;d&#x27;, &#x27;\u0448\u0442&#x27;, &#x27;\u043f\u043e\u0434\u0445\u0430&#x27;, &#x27;\u043c&#x27;, &#x27;\u0442\u0438\u043f&#x27;, &#x27;vz&#x27;, &#x27;\u0441\u0441&#x27;, &#x27;m&#x27;, &#x27;\u0443\u043f&#x27;, &#x27;mm&#x27;}"}, {"fullname": "find_similar.tokenize.STOP_WORDS", "modulename": "find_similar.tokenize", "qualname": "STOP_WORDS", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;\u043c\u043d\u043e\u0433\u043e&#x27;, &#x27;\u0432\u0441\u0435\u0445&#x27;, &#x27;\u0432\u0441\u044e&#x27;, &#x27;\u0442\u0440\u0438&#x27;, &#x27;\u0433\u0434\u0435&#x27;, &#x27;\u0434\u043e&#x27;, &#x27;mm&#x27;, &#x27;m&#x27;, &#x27;\u043d\u0438&#x27;, &#x27;\u0431\u044b\u043b&#x27;, &#x27;\u043d\u0435\u0442&#x27;, &#x27;\u043c\u0435\u043d\u044f&#x27;, &#x27;\u043e&#x27;, &#x27;\u0432\u043e&#x27;, &#x27;\u043c\u043e\u0439&#x27;, &#x27;\u043d\u0435\u0435&#x27;, &#x27;\u0431\u043e\u043b\u0435\u0435&#x27;, &#x27;\u043b\u0438&#x27;, &#x27;;&#x27;, &#x27;(&#x27;, &#x27;\u0435\u0441\u043b\u0438&#x27;, &#x27;\u0436\u0435&#x27;, &#x27;\u0438&#x27;, &#x27;\u0431\u044b\u043b\u043e&#x27;, &#x27;\u0440\u0430\u0437\u0432\u0435&#x27;, &#x27;\u0445\u043e\u0442\u044c&#x27;, &#x27;.&#x27;, &#x27;\u0435\u0433\u043e&#x27;, &#x27;\u043b\u0443\u0447\u0448\u0435&#x27;, &#x27;\u043c\u043e\u044f&#x27;, &#x27;\u0445&#x27;, &#x27;\u0432\u044b&#x27;, &#x27;\u0435\u0449\u0435&#x27;, &#x27;\u0434\u0430\u0436\u0435&#x27;, &#x27;\u0434\u0430&#x27;, &#x27;\u043e\u0431&#x27;, &#x27;\u043d\u0438\u0431\u0443\u0434\u044c&#x27;, &#x27;\u0441&#x27;, &#x27;\u0441\u0432\u043e\u044e&#x27;, &#x27;\u0442\u0438\u043f&#x27;, &#x27;\u0432&#x27;, &#x27;\u044d\u0442\u043e\u0442&#x27;, &#x27;\u043d\u0438\u0445&#x27;, &#x27;\u0441\u0435\u0431\u0435&#x27;, &#x27;\u0442\u0435\u043f\u0435\u0440\u044c&#x27;, &#x27;\u043e\u0434\u0438\u043d&#x27;, &#x27;\u0431\u044b\u043b\u0430&#x27;, &#x27;\u0441\u0435\u0431\u044f&#x27;, &#x27;\u043f\u0440\u043e&#x27;, &#x27;\u043d\u0435\u0439&#x27;, &#x27;\u043a\u0430\u043a\u043e\u0439&#x27;, &#x27;\u0447\u0435\u0433\u043e&#x27;, &#x27;\u0437\u0430\u0447\u0435\u043c&#x27;, &#x27;-&#x27;, &#x27;\u043d\u0430\u0441&#x27;, &#x27;\u0447\u0442\u043e\u0431\u044b&#x27;, &#x27;\u0442\u0443\u0442&#x27;, &#x27;\u043f\u0435\u0440\u0435\u0434&#x27;, &#x27;\u043d\u0430&#x27;, &#x27;\u0432\u0430\u0441&#x27;, &#x27;cc&#x27;, &#x27;\u0442\u043e\u0436\u0435&#x27;, &#x27;\u0442\u0430\u043c&#x27;, &#x27;\u044d\u0442\u043e\u0439&#x27;, &#x27;\u0431\u044b\u0442\u044c&#x27;, &#x27;\u0442\u0430\u043a\u043e\u0439&#x27;, &#x27;,&#x27;, &#x27;\u0437\u0430&#x27;, &#x27;\u0432\u043f\u0440\u043e\u0447\u0435\u043c&#x27;, &#x27;vz&#x27;, &#x27;\u0431\u043e\u043b\u044c\u0448\u0435&#x27;, &#x27;\u0441\u043e\u0432\u0441\u0435\u043c&#x27;, &#x27;\u0435\u0441\u0442\u044c&#x27;, &#x27;\u043d\u0438\u043c&#x27;, &#x27;\u043d\u0435\u043b\u044c\u0437\u044f&#x27;, &#x27;\u0447\u0442\u043e\u0431&#x27;, &#x27;\u0435\u0435&#x27;, &#x27;\u0434\u043b\u044f&#x27;, &#x27;\u0441\u0430\u043c&#x27;, &#x27;)&#x27;, &#x27;\u044d\u0442\u0438&#x27;, &#x27;\u0432\u0430\u043c&#x27;, &#x27;\u043c&#x27;, &#x27;\u043c\u043d\u0435&#x27;, &#x27;\u0442\u044b&#x27;, &#x27;\u043a\u0442\u043e&#x27;, &#x27;\u043d\u0435\u0433\u043e&#x27;, &#x27;\u043f\u043e\u0442\u043e\u043c\u0443&#x27;, &#x27;\u0434\u0432\u0430&#x27;, &#x27;\u043d\u043e&#x27;, &#x27;\u043f\u043e\u0442\u043e\u043c&#x27;, &#x27;\u043f\u043e\u0447\u0442\u0438&#x27;, &#x27;x&#x27;, &#x27;\u043f\u0440\u0438&#x27;, &#x27;\u043d\u0435&#x27;, &#x27;\u044d\u0442\u0443&#x27;, &#x27;\u0435\u043c\u0443&#x27;, &#x27;\u043d\u0443&#x27;, &#x27;\u0442\u043e\u043c&#x27;, &#x27;\u043a\u0430\u043a\u0430\u044f&#x27;, &#x27;\u043c\u043e\u0436\u043d\u043e&#x27;, &#x27;\u0445\u043e\u0440\u043e\u0448\u043e&#x27;, &#x27;\u0441\u0435\u0439\u0447\u0430\u0441&#x27;, &#x27;\u0432\u0441\u0435\u0433\u043e&#x27;, &#x27;\u043c\u044b&#x27;, &#x27;\u043e\u043d\u0430&#x27;, &#x27;\u0442\u043e\u0442&#x27;, &#x27;\u0436&#x27;, &#x27;\u0431\u0443\u0434\u0442\u043e&#x27;, &#x27;\u043f\u043e\u0434&#x27;, &#x27;\u0442\u043e\u0433\u0434\u0430&#x27;, &#x27;\u0443\u043f&#x27;, &#x27;\u0441\u043e&#x27;, &#x27;\u0442\u043e\u0433\u043e&#x27;, &#x27;\u0431\u044b&#x27;, &#x27;\u043c\u043e\u0436\u0435\u0442&#x27;, &#x27;\u0431\u0443\u0434\u0435\u0442&#x27;, &#x27;\u0432\u0441\u0435\u0433\u0434\u0430&#x27;, &#x27;\u0447\u0442\u043e&#x27;, &#x27;\u0432\u0435\u0434\u044c&#x27;, &#x27;\u0432\u0434\u0440\u0443\u0433&#x27;, &#x27;\u0442\u043e\u043b\u044c\u043a\u043e&#x27;, &#x27;\u0431\u0435\u0437&#x27;, &#x27;\u0431\u044b\u043b\u0438&#x27;, &#x27;\u0437\u0434\u0435\u0441\u044c&#x27;, &#x27;*&#x27;, &#x27;\u043f\u043e\u0434\u0445\u0430&#x27;, &#x27;\u0438\u0437&#x27;, &#x27;\u0435\u0439&#x27;, &#x27;\u0438\u043b\u0438&#x27;, &#x27;\u043d\u0430\u0434\u043e&#x27;, &#x27;\u0442\u0430\u043a&#x27;, &#x27;\u0447\u0435\u0440\u0435\u0437&#x27;, &#x27;\u043a\u0443\u0434\u0430&#x27;, &#x27;\u043c\u043c&#x27;, &#x27;d&#x27;, &#x27;\u0438\u043c&#x27;, &#x27;\u0442\u0435\u0431\u044f&#x27;, &#x27;\u043a\u043e\u043d\u0435\u0447\u043d\u043e&#x27;, &#x27;\u043f\u043e&#x27;, &#x27;\u0443&#x27;, &#x27;\u043a&#x27;, &#x27;\u043e\u043d&#x27;, &#x27;\u0442\u0435\u043c&#x27;, &#x27;\u043c\u0435\u0436\u0434\u0443&#x27;, &#x27;\u0442\u043e&#x27;, &#x27;\u0438\u043d\u043e\u0433\u0434\u0430&#x27;, &#x27;:&#x27;, &#x27;\u043f\u043e\u0441\u043b\u0435&#x27;, &#x27;\u043d\u0438\u0447\u0435\u0433\u043e&#x27;, &#x27;\u043d\u0438\u043a\u043e\u0433\u0434\u0430&#x27;, &#x27;\u044d\u0442\u043e\u043c&#x27;, &#x27;\u043a\u0430\u043a&#x27;, &#x27;\u0443\u0436&#x27;, &#x27;\u0430&#x27;, &#x27;\u043e\u0442&#x27;, &#x27;\u0434\u0440\u0443\u0433\u043e\u0439&#x27;, &#x27;\u0447\u0443\u0442\u044c&#x27;, &#x27;\u043e\u043d\u0438&#x27;, &#x27;\u043e\u043f\u044f\u0442\u044c&#x27;, &#x27;\u043d\u0430\u0434&#x27;, &#x27;\u0447\u0435\u043c&#x27;, &#x27;\u0448\u0442&#x27;, &#x27;\u0432\u0441\u0435&#x27;, &#x27;\u0432\u043e\u0442&#x27;, &#x27;\u044d\u0442\u043e\u0433\u043e&#x27;, &#x27;\u043d\u0430\u043a\u043e\u043d\u0435\u0446&#x27;, &#x27;\u0441\u0441&#x27;, &#x27;\u0440\u0430\u0437&#x27;, &#x27;\u0443\u0436\u0435&#x27;, &#x27;\u0438\u0445&#x27;, &#x27;\u043a\u043e\u0433\u0434\u0430&#x27;, &#x27;\u044f&#x27;}"}, {"fullname": "find_similar.tokenize.spacing", "modulename": "find_similar.tokenize", "qualname": "spacing", "kind": "function", "doc": "<p>replace chars to space</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>text</strong>:  Text to spacing</li>\n<li><strong>chars</strong>:  Chars to replace</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>new text without chars with spaces</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">chars</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "find_similar.tokenize.replacing", "modulename": "find_similar.tokenize", "qualname": "replacing", "kind": "function", "doc": "<p>replace chars to empty string</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>text</strong>:  Text to replace</li>\n<li><strong>chars</strong>:  Chars to replace</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>new text without chars</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">chars</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "find_similar.tokenize.replace_yio", "modulename": "find_similar.tokenize", "qualname": "replace_yio", "kind": "function", "doc": "<p>Change russian \u0451 to e</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>text</strong>:  Text to change</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>new text without \u0451 with \u0435</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "find_similar.tokenize.split_text_and_digits", "modulename": "find_similar.tokenize", "qualname": "split_text_and_digits", "kind": "function", "doc": "<p>Split words and digits</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>s</strong>:  enter text</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list of separated texts</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "find_similar.tokenize.get_normal_form", "modulename": "find_similar.tokenize", "qualname": "get_normal_form", "kind": "function", "doc": "<p>Get Normal Form</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>part_parse</strong>:  special object</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>object normal form</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">part_parse</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "find_similar.tokenize.HashebleSet", "modulename": "find_similar.tokenize", "qualname": "HashebleSet", "kind": "class", "doc": "<p>Special class set with hash to compare and sort two sets</p>\n", "bases": "builtins.set"}, {"fullname": "find_similar.tokenize.use_dictionary_multiple", "modulename": "find_similar.tokenize", "qualname": "use_dictionary_multiple", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">tokens</span>, </span><span class=\"param\"><span class=\"n\">dictionary</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "find_similar.tokenize.remove_part_speech", "modulename": "find_similar.tokenize", "qualname": "remove_part_speech", "kind": "function", "doc": "<p>Remove variable part of speach from word</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dictionary</strong>:  default = None. If you want to replace one words to others you can send the dictionary.</li>\n<li><strong>part_parse</strong>:  pymorph2 object</li>\n<li><strong>parts</strong>:  set of part of speach\nNOUN    \u0438\u043c\u044f \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435\nADJF    \u0438\u043c\u044f \u043f\u0440\u0438\u043b\u0430\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0435 (\u043f\u043e\u043b\u043d\u043e\u0435)\nVERB    \u0433\u043b\u0430\u0433\u043e\u043b (\u043b\u0438\u0447\u043d\u0430\u044f \u0444\u043e\u0440\u043c\u0430)\nINFN    \u0433\u043b\u0430\u0433\u043e\u043b (\u0438\u043d\u0444\u0438\u043d\u0438\u0442\u0438\u0432)\nNUMR    \u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435\nPREP    \u043f\u0440\u0435\u0434\u043b\u043e\u0433\nCONJ    \u0441\u043e\u044e\u0437\nPRCL    \u0447\u0430\u0441\u0442\u0438\u0446\u0430</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>text without variable part of speach or None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">part_parse</span>, </span><span class=\"param\"><span class=\"n\">parts</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">dictionary</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "find_similar.tokenize.get_parsed_text", "modulename": "find_similar.tokenize", "qualname": "get_parsed_text", "kind": "function", "doc": "<p>Get Parsed Text</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>word</strong>:  str word</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>pymorphy2 object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">word</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">module</span> <span class=\"s1\">&#39;pymorphy2&#39;</span> <span class=\"kn\">from</span> <span class=\"s1\">&#39;/home/master/Documents/find-similar/venv/lib/python3.10/site-packages/pymorphy2/__init__.py&#39;</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "find_similar.tokenize.tokenize", "modulename": "find_similar.tokenize", "qualname": "tokenize", "kind": "function", "doc": "<p>Main function to tokenize text</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>text</strong>:  Text to tokenize</li>\n<li><strong>stop_words</strong>:  Stop words in Language to ignore</li>\n<li><strong>dictionary</strong>:  default = None. If you want to replace one words to others you can send the dictionary.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Tokens</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">stop_words</span><span class=\"p\">:</span> <span class=\"nb\">set</span>, </span><span class=\"param\"><span class=\"n\">dictionary</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "find_similar.tokenize.prepare_dictionary", "modulename": "find_similar.tokenize", "qualname": "prepare_dictionary", "kind": "function", "doc": "<p>Get special object from simple python dict</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dictionary</strong>:  default = None. If you want to replace one words to others you can send the dictionary.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dictionary of HashebleSet with data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dictionary</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();